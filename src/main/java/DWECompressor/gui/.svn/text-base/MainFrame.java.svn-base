package br.ufpb.di.itidiscipline.dwe.dwecompressor.gui;

import br.ufpb.di.itidiscipline.dwe.compressorapi.CompressorIF;
import br.ufpb.di.itidiscipline.dwe.util.DataFile;
import br.ufpb.di.itidiscipline.dwe.util.TimeUtils;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * Interface grafica principal.
 * .
 * <br><br>
 * Esse projeto faz parte de uma das atividades da disciplina de Introdução
 * à Teoria da Informação do Departamento de Informática da Universidade Federal
 * da Paraíba (UFPB) do período 2010.1 ministrada pelo professor Leonardo Vidal.
 *
 * @since 28 de abril de 2010
 * @author Elenilson Vieira - elenilson[at]elenilsonvieira.com
 * @author Daniel Pires - dpsmetal[at]gmail.com
 * @author Wolgrand Cardoso - wolgrandcardoso[at]gmail.com
 * @version 1.0
 * @see www.di.ufpb.br
 */
public class MainFrame extends javax.swing.JFrame {

    public static final int COMPRESS_TAB = 1;
    public static final int UNCOMPRESS_TAB = 2;
    public static final int STATISTICS_TAB = 3;
    private DialogAbout dialogAbout = new DialogAbout(this);
    private Map<String, CompressorIF> compressors;
    private DataFile dataFile;
    private DialogSplash dialogSplash = new DialogSplash(this);

    /**
     * Verdadeiro para modo de compressao e falso para descompressao
     */
    private boolean compressOrUncompress = true;

    /**
     * Construtor
     *
     * @param compressors os compressores a serem utilizados
     */
    public MainFrame(Map<String, CompressorIF> compressors) {
        initComponents();
        setLocationRelativeTo(null);
        this.compressors = handle(compressors);

        jComboBoxCompressors.removeAllItems();
        for(String extension : compressors.keySet()){
            CompressorIF compressorIF = compressors.get(extension);
            jComboBoxCompressors.addItem(compressorIF.getName());
        }

        /*** Remove as tabs ***/
        removeTab(COMPRESS_TAB);
        removeTab(UNCOMPRESS_TAB);
        removeTab(STATISTICS_TAB);
    }
    
    @Override
    public void dispose(){
        int option = JOptionPane.showConfirmDialog(this,
                "Are you sure want to exit?", "Information", JOptionPane.YES_NO_OPTION);

        if(option != JOptionPane.NO_OPTION)
            System.exit(1);
    }

    /**
     * Manipula o compressor para evitar extensoes maiusculas ou compressores nulos
     *
     * @param compressors os compressores
     *
     * @return os compressores manipulados
     */
    private Map<String, CompressorIF> handle(Map<String, CompressorIF> compressors){
        if(compressors == null)
            return null;

        Map<String, CompressorIF> newCompressors = new HashMap<String, CompressorIF>();

        for(String key : compressors.keySet()){
            CompressorIF compressorIF = compressors.get(key);

            if(compressorIF != null)
                newCompressors.put(key.toLowerCase(), compressorIF);
        }

        return newCompressors;
    }

    /**
     * Retorna um compressor que tem o nome passado como argumento (nao e'
     * sensitive case).
     *
     * @param name o nome do compressor
     *
     * @return o compressor ou null caso nenhum for achado
     */
    public CompressorIF getCompressorByName(String name){
        for(String extension : compressors.keySet()){
            CompressorIF compressorIF = getCompressorByExtension(extension);

            if(compressorIF.getName().equalsIgnoreCase(name))
                return compressorIF;
        }

        return null;
    }
    
    /**
     * Retorna um compressor que tem a extensao passada como argumento (nao e'
     * sensitive case)
     * 
     * @param extension a extensao do compressor
     * 
     * @return o compressor ou null caso nenhum for achado
     */
    public CompressorIF getCompressorByExtension(String extension){
        return compressors.get(extension);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane = new javax.swing.JTabbedPane();
        jPanelCompress = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxCompressors = new javax.swing.JComboBox();
        jLabelSelectedFile_Compress = new javax.swing.JLabel();
        jButtonCompress = new javax.swing.JButton();
        jPanelUncompress = new javax.swing.JPanel();
        jLabelUsedCompressor = new javax.swing.JLabel();
        jLabelSelectedFile_Uncompress = new javax.swing.JLabel();
        jButtonUncompress = new javax.swing.JButton();
        jPanelStatistics = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaStatistics = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("DWECompressor");

        jTabbedPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jLabel1.setText("Compressor: ");

        jComboBoxCompressors.setToolTipText("Avaliable Compressors");

        jLabelSelectedFile_Compress.setText(".");
        jLabelSelectedFile_Compress.setBorder(javax.swing.BorderFactory.createTitledBorder("Selected File"));

        jButtonCompress.setText("Compress");
        jButtonCompress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCompressActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCompressLayout = new javax.swing.GroupLayout(jPanelCompress);
        jPanelCompress.setLayout(jPanelCompressLayout);
        jPanelCompressLayout.setHorizontalGroup(
            jPanelCompressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCompressLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCompressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelSelectedFile_Compress, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                    .addGroup(jPanelCompressLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(13, 13, 13)
                        .addComponent(jComboBoxCompressors, 0, 364, Short.MAX_VALUE))
                    .addComponent(jButtonCompress, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanelCompressLayout.setVerticalGroup(
            jPanelCompressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCompressLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCompressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxCompressors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabelSelectedFile_Compress)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                .addComponent(jButtonCompress)
                .addContainerGap())
        );

        jTabbedPane.addTab("Compress", jPanelCompress);

        jLabelUsedCompressor.setText(".");
        jLabelUsedCompressor.setBorder(javax.swing.BorderFactory.createTitledBorder("Used Compressor"));

        jLabelSelectedFile_Uncompress.setText(".");
        jLabelSelectedFile_Uncompress.setBorder(javax.swing.BorderFactory.createTitledBorder("SelectedFile"));

        jButtonUncompress.setText("Uncompress");
        jButtonUncompress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUncompressActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelUncompressLayout = new javax.swing.GroupLayout(jPanelUncompress);
        jPanelUncompress.setLayout(jPanelUncompressLayout);
        jPanelUncompressLayout.setHorizontalGroup(
            jPanelUncompressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUncompressLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelUncompressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelSelectedFile_Uncompress, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                    .addComponent(jLabelUsedCompressor, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                    .addComponent(jButtonUncompress, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanelUncompressLayout.setVerticalGroup(
            jPanelUncompressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUncompressLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelUsedCompressor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelSelectedFile_Uncompress)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addComponent(jButtonUncompress)
                .addContainerGap())
        );

        jTabbedPane.addTab("Uncompress", jPanelUncompress);

        jTextAreaStatistics.setColumns(20);
        jTextAreaStatistics.setEditable(false);
        jTextAreaStatistics.setRows(5);
        jScrollPane1.setViewportView(jTextAreaStatistics);

        javax.swing.GroupLayout jPanelStatisticsLayout = new javax.swing.GroupLayout(jPanelStatistics);
        jPanelStatistics.setLayout(jPanelStatisticsLayout);
        jPanelStatisticsLayout.setHorizontalGroup(
            jPanelStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStatisticsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelStatisticsLayout.setVerticalGroup(
            jPanelStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStatisticsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane.addTab("Statistics", jPanelStatistics);

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/ufpb/di/itidiscipline/dwe/dwecompressor/images/toggle16x16.png"))); // NOI18N
        jMenuItem1.setText("Open");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/ufpb/di/itidiscipline/dwe/dwecompressor/images/del16x16.png"))); // NOI18N
        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/ufpb/di/itidiscipline/dwe/dwecompressor/images/question16x16.gif"))); // NOI18N
        jMenuItem3.setText("About");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        this.dialogAbout.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * Adiciona uma tab pre-criada ao tabbedPane.
     * 
     * @param tab a tab a ser inserida
     */
    private void addTab(int tab){
        switch(tab){
            case COMPRESS_TAB : {
                removeTab(COMPRESS_TAB);
                jTabbedPane.addTab("Compress", jPanelCompress);
            }; break;
            case UNCOMPRESS_TAB : {
                removeTab(UNCOMPRESS_TAB);
                jTabbedPane.addTab("Uncompress", jPanelUncompress);
            }; break;
            case STATISTICS_TAB : {
                removeTab(STATISTICS_TAB);
                jTabbedPane.addTab("Statistics", jPanelStatistics);
            }; break;
        }
    }

    /**
     * Verfica se uma determinada extensao e' aceita por algum compressor.
     *
     * @param extension a extensao a ser verificada
     *
     * @return verdadeiro para aceitacao e falso caso contrario
     */
    public boolean containsExtension(String extension){
        if(extension == null)
            return false;

        return compressors.containsKey(extension);
    }

    /**
     * Remove uma tab pre-criada ao tabbedPane.
     *
     * @param tab a tab a ser removida
     */
    private void removeTab(int tab){
        switch(tab){
            case COMPRESS_TAB : {
                jTabbedPane.remove(jPanelCompress);
            }; break;
            case UNCOMPRESS_TAB : {
                jTabbedPane.remove(jPanelUncompress);
            }; break;
            case STATISTICS_TAB : {
                jTabbedPane.remove(jPanelStatistics);
            }; break;
        }
    }

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        File selectedFile = selectFile(null, null);

        if(selectedFile != null){
            this.dataFile = new DataFile(selectedFile);
            String extension = dataFile.getExtension();
            compressOrUncompress = !containsExtension(extension);

            /*** Modo compressao ***/
            if(compressOrUncompress){
                removeTab(STATISTICS_TAB);
                removeTab(UNCOMPRESS_TAB);
                addTab(COMPRESS_TAB);
                jLabelSelectedFile_Compress.setText(dataFile.getPath());
            }
            /*** Modo descompressao ***/
            else{
                removeTab(STATISTICS_TAB);
                removeTab(COMPRESS_TAB);
                addTab(UNCOMPRESS_TAB);
                String compressorName = getCompressorByExtension(extension).getName();
                jLabelUsedCompressor.setText(compressorName);
                jLabelSelectedFile_Uncompress.setText(dataFile.getPath());
            }

            jTextAreaStatistics.setText("");
            addTab(STATISTICS_TAB);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButtonCompressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCompressActionPerformed
        // TODO add your handling code here:
        File selectedDiretory = selectDirectory();

        if(selectedDiretory != null)
            process(dataFile, selectedDiretory);
    }//GEN-LAST:event_jButtonCompressActionPerformed

    private void jButtonUncompressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUncompressActionPerformed
        // TODO add your handling code here:
        File selectedDiretory = selectDirectory();

        if(selectedDiretory != null)
            process(dataFile, selectedDiretory);
    }//GEN-LAST:event_jButtonUncompressActionPerformed

    /**
     * Faz a chamada de processamento (compressao ou descompressao) e seta as
     * estatisticas.
     * 
     * @param dataFile o arquivo a ser processado
     * @param destinyFile o diretorio onde o arquivo destino devera ser gravado (null para mesmo diretorio do source)
     * 
     * @return o arquivo processado
     */
    public DataFile process(DataFile dataFile, File destinyFile){
        DataFile newFile = null;

        if(compressOrUncompress && jComboBoxCompressors.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(this, "Select a compressor!", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        try{
            dialogSplash.setVisible(true);
            long timeBefore = System.currentTimeMillis();

            String originalFileName = dataFile.getPath();
            long originalFileSize = dataFile.getSize();

            newFile = compressOrUncompress ? compress(dataFile, destinyFile) : uncompress(dataFile, destinyFile);
            String newFileName = newFile.getPath();
            long newFileSize = newFile.getSize();

            long timeAfter = System.currentTimeMillis();

            setStatistics(originalFileName, originalFileSize, newFileName, newFileSize, timeBefore, timeAfter);
            dialogSplash.setVisible(false);
            JOptionPane.showMessageDialog(this, "Process ocurred with sucess!", "Sucess", JOptionPane.INFORMATION_MESSAGE);
        }
        catch(FileNotFoundException fileNotFoundException){
            dialogSplash.setVisible(false);
            JOptionPane.showMessageDialog(this, "File not found!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        catch(IOException iOException){
            dialogSplash.setVisible(false);
            JOptionPane.showMessageDialog(this, "Input or output error!\n" + iOException.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        catch(Exception ex){
            dialogSplash.setVisible(false);
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Unknow error!", "Error", JOptionPane.ERROR_MESSAGE);
        }

        return newFile;
    }
    
    /**
     * Faz a compressao do arquivo com o compressor escolhido
     * 
     * @param dataFile o arquivo a ser comprimido
     * @param destinyFile o diretorio onde o arquivo destino devera ser gravado (null para mesmo diretorio do source)
     * 
     * @return o arquivo comprimido
     */
    private DataFile compress(DataFile dataFile, File destinyFile) throws FileNotFoundException, IOException {
        Object selectedItem = jComboBoxCompressors.getSelectedItem();

        if(selectedItem == null)
            return null;

        String selectedCompressor = (String) selectedItem;
        CompressorIF compressorIF = getCompressorByName(selectedCompressor);

        if(compressorIF == null)
            return null;

        if(destinyFile == null || !destinyFile.isDirectory()){
            String locationToWriteDestinyFile = String.format("%s.%s", dataFile.getPath(), compressorIF.getExtension());
            destinyFile = new File(locationToWriteDestinyFile);
        }
        else{
            StringBuilder pathDestinyFile = new StringBuilder(destinyFile.getAbsolutePath().trim());
            
            if(pathDestinyFile.length() > 0)
                pathDestinyFile.append(File.separator);

            pathDestinyFile
                    .append(dataFile.getName())
                    .append(".")
                    .append(compressorIF.getExtension());

            destinyFile = new File(pathDestinyFile.toString());
        }
        
        compressorIF.compress(dataFile.getFile(), destinyFile);

        return new DataFile(destinyFile);
    }

    /**
     * Faz a descompressao do arquivo com o descompressor correto
     *
     * @param dataFile o arquivo a ser descomprimido
     * @param destinyFile o diretorio onde o arquivo destino devera ser gravado (null para mesmo diretorio do source)
     *
     * @return o arquivo descomprimido
     */
    private DataFile uncompress(DataFile dataFile, File destinyFile) throws FileNotFoundException, IOException{
        String extension = dataFile.getExtension();
        CompressorIF compressorIF = getCompressorByExtension(extension);

        if(destinyFile == null || !destinyFile.isDirectory()){
            StringBuilder newFileName = new StringBuilder(dataFile.getPath());
            int lastIndexOfExtension = newFileName.lastIndexOf(extension);
            newFileName.delete(lastIndexOfExtension - 1, newFileName.length());
            destinyFile = new File(newFileName.toString());
        }
        else{
            StringBuilder pathDestinyFile = new StringBuilder(destinyFile.getAbsolutePath().trim());

            if(pathDestinyFile.length() > 0)
                pathDestinyFile.append(File.separator);

            pathDestinyFile.append(dataFile.getName());
            int lastIndexOfExtension = pathDestinyFile.lastIndexOf(extension);
            pathDestinyFile.delete(lastIndexOfExtension - 1, pathDestinyFile.length());
            destinyFile = new File(pathDestinyFile.toString());
        }

        compressorIF.uncompress(dataFile.getFile(), destinyFile);

        return new DataFile(destinyFile);
    }

    /**
     * Formata e seta as estatisticas na tab.
     *
     * @param originalFilePath o caminho do arquivo original
     * @param originalFileSize o tamanho do arquivo original em bytes
     * @param newFilePath o caminho do novo arquivo
     * @param newFileSize o tamanho do novo arquivo em bytes
     * @param timeBefore o tempo antes do processamento
     * @param timeAfter o tempo depois do processamento
     */
    public void setStatistics(String originalFilePath, long originalFileSize, String newFilePath,
            long newFileSize, long timeBefore, long timeAfter){
        StringBuilder textBuilder = new StringBuilder();

        /*** Formatando estatisticas ***/

        textBuilder
                .append("Original file:\n")
                .append("Path - ").append(originalFilePath)
                .append("\n")
                .append("Size - ").append(originalFileSize).append(" bytes\n\n");

        textBuilder
                .append("New file:\n")
                .append("Path - ").append(newFilePath)
                .append("\n")
                .append("Size - ").append(newFileSize).append(" bytes\n\n");

        textBuilder
                .append("Time spent: ")
                .append(TimeUtils.convertInterval(timeBefore, timeAfter));
        
        /*** Formatando estatisticas ***/

        jTextAreaStatistics.setText(textBuilder.toString());
    }

    /**
     * Seleciona um arquivo de acordo com as extensoes
     *
     * @param extensionsDescription descricao das extensoes dos arquivos que podem ser selcionados
     * @param extensions as extensoes permitidas
     *
     * @return o arquivo selecionado ou null se nada foi selecionado
     */
    private File selectFile(String extensionsDescription, String... extensions) {
        FileNameExtensionFilter fileFilter = null;
        JFileChooser jFileChooser = new JFileChooser();

        if(extensions != null && extensionsDescription != null){
            fileFilter = new FileNameExtensionFilter(extensionsDescription, extensions);
            jFileChooser.addChoosableFileFilter(fileFilter);
        }

        jFileChooser.setDialogTitle("Select a file!");
        jFileChooser.setApproveButtonText("Select");
        jFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jFileChooser.setFileFilter(null);
        jFileChooser.setMultiSelectionEnabled(false);
        int result = jFileChooser.showOpenDialog(this);

        return result != JFileChooser.CANCEL_OPTION ? jFileChooser.getSelectedFile() : null;
    }

    /**
     * Seleciona um diretorio qualquer
     *
     * @return o diretorio selecionado ou null se nada foi selecionado
     */
    private File selectDirectory() {
        JFileChooser jFileChooser = new JFileChooser();

        jFileChooser.setDialogTitle("Select a directory to save file!");
        jFileChooser.setApproveButtonText("Select");
        jFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jFileChooser.setFileFilter(null);
        jFileChooser.setMultiSelectionEnabled(false);
        int result = jFileChooser.showOpenDialog(this);

        return result != JFileChooser.CANCEL_OPTION ? jFileChooser.getSelectedFile() : null;
    }

    /**
     * Retorna as extensoes que o fileChooser utiliza para abrir o codigo fonte.
     *
     * @return um array com as extensoes permitidas
     */
    public List<String> getExtensions() {
        List<String> result = null;

        if(compressors != null && compressors.size() > 0){
            Object[] keys = compressors.keySet().toArray();
            result =  new ArrayList();

            for(int i = 0; i < keys.length; i++)
                result.add((String) keys[i]);
        }

        return result;
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCompress;
    private javax.swing.JButton jButtonUncompress;
    private javax.swing.JComboBox jComboBoxCompressors;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelSelectedFile_Compress;
    private javax.swing.JLabel jLabelSelectedFile_Uncompress;
    private javax.swing.JLabel jLabelUsedCompressor;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanelCompress;
    private javax.swing.JPanel jPanelStatistics;
    private javax.swing.JPanel jPanelUncompress;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTextArea jTextAreaStatistics;
    // End of variables declaration//GEN-END:variables

}
