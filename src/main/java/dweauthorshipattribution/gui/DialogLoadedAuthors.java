package dweauthorshipattribution.gui;

import java.io.File;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.Vector;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import dweauthorshipattribution.interfaces.AuthorIF;
import dweauthorshipattribution.interfaces.DoTrainingIF;
import dweauthorshipattribution.util.FileUtils;

/**
 * Tela com os autores carregados.
 *
 * <br><br>
 * Esse projeto faz parte de uma das atividades da disciplina de Introdução
 * à Teoria da Informação do Departamento de Informática da Universidade Federal
 * da Paraíba (UFPB) do período 2010.1 ministrada pelo professor Leonardo Vidal e
 * consiste na atribuicao de autoria utilizando a frequencia de classificacao das
 * palavras utilizadas por um determinado autor.
 * Este e' o projeto final da disciplina.
 *
 * @since 26 de junho de 2010
 * @author Elenilson Vieira - elenilson[at]elenilsonvieira.com
 * @author Daniel Pires - dpsmetal[at]gmail.com
 * @author Wolgrand Cardoso - wolgrandcardoso[at]gmail.com
 * @version 1.0
 * @see www.di.ufpb.br
 */
public class DialogLoadedAuthors extends javax.swing.JDialog {

    private Set<AuthorIF> authors = new HashSet<AuthorIF>();

    /** Creates new form DialogAuthors */
    public DialogLoadedAuthors(java.awt.Frame parent) {
        super(parent, true);
        initComponents();
        setLocationRelativeTo(parent);
    }

    /**
     * Retorna os autores carregados.
     * 
     * @return os autores
     */
    public Set<AuthorIF> getAuthors() {
        return Collections.unmodifiableSet(authors);
    }

    /**
     * Seta os autores carregados.
     *
     * @param a os autores
     */
    public void setAuthors(Set<AuthorIF> authors) {
        if(authors != null)
            this.authors = authors;
    }

    /**
     * Adiciona um autor a lista.
     *
     * @param author o autor a ser adicionado
     */
    public void addAuthor(AuthorIF author){
        if(author != null){
            authors.add(author);
            reload();
        }
    }

    /**
     * Adiciona autores a lista.
     *
     * @param a a lista de autores a serem adicionados
     */
    public void addAuthor(Set<AuthorIF> a){
        if(a != null){
            for (AuthorIF authorIF : a) {
                authors.add(authorIF);
            }

            reload();
        }
    }

    /**
     * Remove um autor da lista.
     *
     * @param position a posicao do autor a ser removido
     *
     * @return o autor removido ou null
     */
    public AuthorIF removeAuthor(int position){
        AuthorIF removedAuthor = null;

        if(position >= 0 && position < authors.size()){
            int i = 0;

            for (AuthorIF authorIF : authors) {
                if(i == position){
                    removedAuthor = authorIF;
                    authors.remove(authorIF);
                    reload();
                    break;
                }else
                    i++;
            }
        }

        return removedAuthor;
    }

    /**
     * Recarrega a tabela para ficar de acordo com a lista de autores.
     */
    private void reload(){
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Author");
        model.addColumn("File");

        for (AuthorIF authorIF : authors) {
            Vector<String> v = new Vector<String>();
            v.add(authorIF.getAuthorName());
            v.add(authorIF.getAuthorFile().getAbsolutePath());

            model.addRow(v);
        }

        jTableAuthors.setModel(model);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAuthors = new javax.swing.JTable();
        jButtonAdd = new javax.swing.JButton();
        jButtonRemove = new javax.swing.JButton();

        setTitle("Authors");

        jTableAuthors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Author", "File"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableAuthors);

        jButtonAdd.setText("Add");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonRemove.setText("Remove");
        jButtonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonRemove)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAdd)
                    .addComponent(jButtonRemove))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveActionPerformed
        // TODO add your handling code here:
        int index = jTableAuthors.getSelectedRow();
        AuthorIF author = removeAuthor(index);

        if(author == null)
            JOptionPane.showMessageDialog(this, "Select one author!", "Information", JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_jButtonRemoveActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        // TODO add your handling code here:
        File[] selectedFiles = FileUtils.selectFiles(this, "Files training", DoTrainingIF.EXTENSION);

        if(selectedFiles != null && selectedFiles.length > 0){
            try{
                Set<AuthorIF> selectedAuthors = FileUtils.loadAuthorFiles(selectedFiles);
                addAuthor(selectedAuthors);

                JOptionPane.showMessageDialog(this, "Load with sucess!", "Sucess", JOptionPane.INFORMATION_MESSAGE);
            }catch(Exception ex){
                JOptionPane.showMessageDialog(this, "Error loading some files!", "error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonAddActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DialogLoadedAuthors dialog = new DialogLoadedAuthors(new javax.swing.JFrame());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonRemove;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableAuthors;
    // End of variables declaration//GEN-END:variables

}
