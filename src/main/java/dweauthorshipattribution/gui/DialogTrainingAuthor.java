package dweauthorshipattribution.gui;

import java.io.File;
import java.util.ArrayList;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

import Compressores.TextFile;
import Compressores.TimeUtils;
import PPM.modules.AbstractPPMModule;
import dweauthorshipattribution.interfaces.DoTrainingIF;
import dweauthorshipattribution.interfaces.WordClassifierIF;
import dweauthorshipattribution.lexicon.WordClassifier;
import dweauthorshipattribution.training.DoTraining;
import dweauthorshipattribution.util.FileUtils;

/**
 * Tela de treinamento de autores.
 *
 * <br>
 * <br>
 * Esse projeto faz parte de uma das atividades da disciplina de Introdução à
 * Teoria da Informação do Departamento de Informática da Universidade
 * Federal da Paraíba (UFPB) do período 2010.1 ministrada pelo professor
 * Leonardo Vidal e consiste na atribuicao de autoria utilizando a frequencia de
 * classificacao das palavras utilizadas por um determinado autor. Este e' o
 * projeto final da disciplina.
 *
 * @since 26 de junho de 2010
 * @author Elenilson Vieira - elenilson[at]elenilsonvieira.com
 * @author Daniel Pires - dpsmetal[at]gmail.com
 * @author Wolgrand Cardoso - wolgrandcardoso[at]gmail.com
 * @version 1.0
 * @see www.di.ufpb.br
 */
public class DialogTrainingAuthor extends javax.swing.JDialog {

	private ArrayList<TextFile> selectedTextFilesAT = new ArrayList<>();
	private WordClassifierIF wordClassifier;
	private DialogComicSplash dialogComicSplash = new DialogComicSplash(null);
	private DefaultListModel model = new DefaultListModel();

	/**
	 * Creates new form DialogTrainingAuthor
	 */
	public DialogTrainingAuthor(java.awt.Frame parent, boolean modal, WordClassifierIF wordClassifier) {
		super(parent, modal);
		if (wordClassifier == null) {
			throw new IllegalArgumentException("Word classifier can't be null!");
		}

		initComponents();
		setLocationRelativeTo(parent);
		this.wordClassifier = wordClassifier;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        jButtonSelectFile = new javax.swing.JButton();
        jButtonTraining = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListaArquivosTreinamento = new javax.swing.JList<>();
        remove = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Context = new javax.swing.JComboBox<>();

        setTitle("Ttraining author");

        jButtonSelectFile.setText("Add files");
        jButtonSelectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectFileActionPerformed(evt);
            }
        });

        jButtonTraining.setText("Training");
        jButtonTraining.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTrainingActionPerformed(evt);
            }
        });

        ListaArquivosTreinamento.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(ListaArquivosTreinamento);

        remove.setText("Remove file");
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });

        jLabel1.setText("Select a file to remove");

        Context.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Context.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(remove)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(210, 210, 210)
                                .addComponent(Context, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonTraining, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(224, 224, 224)
                        .addComponent(jButtonSelectFile)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jButtonSelectFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(remove)
                    .addComponent(jButtonTraining, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Context, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );

        pack();
        
        Context.removeAllItems();
    	Context.setSelectedItem(null);
    	Context.addItem("");
        Context.addItem("1");
        Context.addItem("2");
        Context.addItem("3");
        Context.addItem("4");
        Context.addItem("5");
    }// </editor-fold>//GEN-END:initComponents

    private void ContextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContextActionPerformed
    	
    }//GEN-LAST:event_ContextActionPerformed

	private void jButtonSelectFileActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonSelectFileActionPerformed
		// TODO add your handling code here:
		// File selectFile = FileUtils.selectFile(this, "Text files", "txt");
		File[] selectedFiles = FileUtils.selectFiles(this, "Files training", "txt");
		if (selectedFiles != null && selectedFiles.length > 0) {
			try {
				for (int i = 0; i < selectedFiles.length; i++) {
					int cont = 0;
					for (int j = 0; j < model.size(); j++) {
						if (model.getElementAt(j).toString().equals(selectedFiles[i].getAbsolutePath())) {
							cont++;
						}
					}
					if (cont == 0) {
						selectedTextFilesAT.add(new TextFile(selectedFiles[i]));
						model.addElement(selectedFiles[i].getAbsolutePath());
						ListaArquivosTreinamento.setModel(model);
					}
				}
			} catch (Exception ex) {
				JOptionPane.showMessageDialog(this, "Error loading text file", "Error", JOptionPane.ERROR_MESSAGE);
				ex.printStackTrace();
			}
		}
	}// GEN-LAST:event_jButtonSelectFileActionPerformed
        
        private void changeContext(String value) throws Exception{
            int K = 0;
            switch (value){
                case "1":
                    K = 1;
                    break;
                case "2":
                    K = 2;
                    break;
                case "3":
                    K = 3;
                    break;
                case "4":
                    K = 4;
                    break;
                case "5":
                    K = 5;
                    break;
                default:
                    throw new Exception("Error");
            }
            
            AbstractPPMModule.DEFAULT_NUMBER_OF_CONTEXTS = K;
        }
        
        
	private void jButtonTrainingActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonTrainingActionPerformed
		// TODO add your handling code here:
                try {
		if (selectedTextFilesAT != null && selectedTextFilesAT.size() > 0 && !Context.getSelectedItem().toString().equals("")) {
                        changeContext(Context.getSelectedItem().toString());
                        String createdTextFileName[] = new String[selectedTextFilesAT.size()];
			for (int i = 0; i < selectedTextFilesAT.size(); i++) {
				createdTextFileName[i] = selectedTextFilesAT.get(i).getName().trim().replace(" ", "_");
			}

			File locationToWrite = new File(System.getProperty("user.dir") + "\\trainingPPMfiles");

			File f = new File(System.getProperty("user.dir") + "\\trainingPPMfiles\\base.bin");
			if (!f.exists()) {
				if (f.getParentFile() != null) {
					if (!f.getParentFile().exists()) { // pega tudo que tem antes do arquivo
						f.getParentFile().mkdirs();
					}
				}
			}
			f.delete();

			DoTrainingIF doTraining[] = new DoTrainingIF[selectedTextFilesAT.size()];

			for (int i = 0; i < selectedTextFilesAT.size(); i++) {
				doTraining[i] = new DoTraining(selectedTextFilesAT.get(i), createdTextFileName[i],
						selectedTextFilesAT.get(i).getName().trim(), locationToWrite, wordClassifier);
			}
			Thread t = new Thread() {

				public void run() {
					long before = System.currentTimeMillis();
					String logTreino = "";
					for (int i = 0; i < selectedTextFilesAT.size(); i++) {
						final TextFile fileSe = selectedTextFilesAT.get(i);
						final String vez = (i + 1) + "/" + selectedTextFilesAT.size();
						try {
							Thread tt = new Thread() {
								public void run() {
									dialogComicSplash.setOperacaoAtual("Treinando autor: " + fileSe.getName() + ".",
											vez);
									dialogComicSplash.setVisible(true);
								}
							};

							tt.start();

							doTraining[i].execute();

							String createdFilePath = doTraining[i].getCreatedFilePath();
							// jLabelCreatedFile.setText(createdFilePath);

							dialogComicSplash.setVisible(false);

							setVisible(false);
							logTreino += fileSe.getName() + ": Sucess.\n";
						} catch (Exception ex) {
							ex.printStackTrace();
							try {
								logTreino += fileSe.getName() + ": Error.\n";
							} catch(Exception ex2){
								logTreino += "ABSOLUTE ERROR%n";
							}
						}
					}
					long after = System.currentTimeMillis();
					String time = TimeUtils.convertInterval(before, after);
					String message = String.format("Authors trained in %s!\n\n%s", time, logTreino);
					JOptionPane.showMessageDialog(null, message, "Sucess", JOptionPane.INFORMATION_MESSAGE);
					selectedTextFilesAT.clear();
				}
			};

			t.start();
		} else
			JOptionPane.showMessageDialog(this, "Check the fields and try again", "Error", JOptionPane.ERROR_MESSAGE);
                
                } catch(Exception e){
                     e.printStackTrace();
                }
	}// GEN-LAST:event_jButtonTrainingActionPerformed

	private void removeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_removeActionPerformed
		try {
			TextFile tx = null;
			for(TextFile f : selectedTextFilesAT) {
				if(f.getPath().equals(ListaArquivosTreinamento.getSelectedValue())) {
					tx = f;
				}
			}
			selectedTextFilesAT.remove(tx);
			model.remove(ListaArquivosTreinamento.getSelectedIndex());
			ListaArquivosTreinamento.setModel(model);
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, "Select a file to remove", "Error", JOptionPane.ERROR_MESSAGE);
			e.printStackTrace();
		}
	}// GEN-LAST:event_removeActionPerformed

	private void eraseFields() {

		model.clear();
		ListaArquivosTreinamento.setModel(model);
	}

	@Override
	public void setVisible(boolean b) {
		if (b) {
			eraseFields();
		}

		super.setVisible(b);
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				DialogTrainingAuthor dialog = new DialogTrainingAuthor(new javax.swing.JFrame(), true,
						new WordClassifier());
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {
					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Context;
    private javax.swing.JList<String> ListaArquivosTreinamento;
    private javax.swing.JButton jButtonSelectFile;
    private javax.swing.JButton jButtonTraining;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton remove;
    // End of variables declaration//GEN-END:variables

}
