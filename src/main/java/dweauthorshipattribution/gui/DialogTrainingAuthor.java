package dweauthorshipattribution.gui;

import java.io.File;

import javax.swing.JOptionPane;

import Compressores.TextFile;
import Compressores.TimeUtils;
import dweauthorshipattribution.interfaces.DoTrainingIF;
import dweauthorshipattribution.interfaces.WordClassifierIF;
import dweauthorshipattribution.lexicon.WordClassifier;
import dweauthorshipattribution.training.DoTraining;
import dweauthorshipattribution.util.FileUtils;
import javax.swing.DefaultListModel;

/**
 * Tela de treinamento de autores.
 *
 * <br><br>
 * Esse projeto faz parte de uma das atividades da disciplina de Introdução à
 * Teoria da Informação do Departamento de Informática da Universidade
 * Federal da Paraíba (UFPB) do período 2010.1 ministrada pelo professor
 * Leonardo Vidal e consiste na atribuicao de autoria utilizando a frequencia de
 * classificacao das palavras utilizadas por um determinado autor. Este e' o
 * projeto final da disciplina.
 *
 * @since 26 de junho de 2010
 * @author Elenilson Vieira - elenilson[at]elenilsonvieira.com
 * @author Daniel Pires - dpsmetal[at]gmail.com
 * @author Wolgrand Cardoso - wolgrandcardoso[at]gmail.com
 * @version 1.0
 * @see www.di.ufpb.br
 */
public class DialogTrainingAuthor extends javax.swing.JDialog {

    private TextFile[] selectedTextFilesAT;
    private WordClassifierIF wordClassifier;
    private DialogComicSplash dialogComicSplash = new DialogComicSplash(null);
    private DefaultListModel model = new DefaultListModel();

    /**
     * Creates new form DialogTrainingAuthor
     */
    public DialogTrainingAuthor(java.awt.Frame parent, boolean modal, WordClassifierIF wordClassifier) {
        super(parent, modal);
        if (wordClassifier == null) {
            throw new IllegalArgumentException("Word classifier can't be null!");
        }

        initComponents();
        setLocationRelativeTo(parent);
        this.wordClassifier = wordClassifier;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jButtonSelectFile = new javax.swing.JButton();
        jButtonTraining = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListaArquivosTreinamento = new javax.swing.JList<>();

        setTitle("Ttraining author");

        jButtonSelectFile.setText("Select Files");
        jButtonSelectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectFileActionPerformed(evt);
            }
        });

        jButtonTraining.setText("Training");
        jButtonTraining.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTrainingActionPerformed(evt);
            }
        });

        ListaArquivosTreinamento.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(ListaArquivosTreinamento);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 199, Short.MAX_VALUE)
                        .addComponent(jButtonTraining, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(197, 197, 197)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(214, 214, 214)
                .addComponent(jButtonSelectFile)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jButtonSelectFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonTraining)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void jButtonSelectFileActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        ListaArquivosTreinamento.removeAll();
// TODO add your handling code here:
        // File selectFile = FileUtils.selectFile(this, "Text files", "txt");
        File[] selectedFiles = FileUtils.selectFiles(this, "Files training", "txt");
        selectedTextFilesAT = new TextFile[selectedFiles.length];
        if (selectedFiles != null && selectedFiles.length > 0) {
            try {
                for (int i = 0; i < selectedFiles.length; i++) {
                    selectedTextFilesAT[i] = new TextFile(selectedFiles[i]);
                    model.addElement(selectedFiles[i].getAbsolutePath());
                    ListaArquivosTreinamento.setModel(model);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error loading text file", "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
        }
    }                                                 

    private void jButtonTrainingActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
        if (selectedTextFilesAT != null && selectedTextFilesAT.length > 0) {
            String createdTextFileName[] = new String[selectedTextFilesAT.length];

            for (int i = 0; i < selectedTextFilesAT.length; i++) {
                createdTextFileName[i] = selectedTextFilesAT[i].getName().substring(0, selectedTextFilesAT[i].getName().length()-4).trim().replace(" ", "_");
            }

            File locationToWrite[] = new File[selectedTextFilesAT.length];

            for (int i = 0; i < selectedTextFilesAT.length; i++) {
                locationToWrite[i] = new File(System.getProperty("user.dir") + "\\TRAINING PPM FILES");
            }

            DoTrainingIF doTraining[]
                    = new DoTrainingIF[selectedTextFilesAT.length];

            for (int i = 0; i < selectedTextFilesAT.length; i++) {
                doTraining[i] = new DoTraining(selectedTextFilesAT[i], createdTextFileName[i], selectedTextFilesAT[i].getName().trim(), locationToWrite[i], wordClassifier);
            }
            Thread t = new Thread() {

                public void run() {
                    long before = System.currentTimeMillis();
                    for (int i = 0; i < selectedTextFilesAT.length; i++) {
                        final TextFile fileSe = selectedTextFilesAT[i];
                        final String vez = (i + 1) + "/" + selectedTextFilesAT.length;
                        try {
                            Thread tt = new Thread() {
                                public void run() {
                                    dialogComicSplash.setOperacaoAtual("Treinando autor: " + fileSe.getName() + ".", vez);
                                    dialogComicSplash.setVisible(true);
                                }
                            };

                            tt.start();

                            doTraining[i].execute();

                            String createdFilePath = doTraining[i].getCreatedFilePath();
                            //jLabelCreatedFile.setText(createdFilePath);

                            dialogComicSplash.setVisible(false);
                            
                            setVisible(false);
                        } catch (Exception ex) {
                            ex.printStackTrace();
                            dialogComicSplash.setVisible(false);
                            JOptionPane.showMessageDialog(null, "Error training author! Verify the training file.", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    long after = System.currentTimeMillis();
                    String time = TimeUtils.convertInterval(before, after);
                    String message = String.format("Authors training with sucess in %s!", time);
                    JOptionPane.showMessageDialog(null, message, "Sucess", JOptionPane.INFORMATION_MESSAGE);
                }
            };

            t.start();
        } else
            JOptionPane.showMessageDialog(this, "Select a text file!", "Error", JOptionPane.ERROR_MESSAGE);
    }                                               

    private void eraseFields() {

        model.clear();
        ListaArquivosTreinamento.setModel(model);
    }

    @Override
    public void setVisible(boolean b) {
        if (b) {
            eraseFields();
        }

        super.setVisible(b);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DialogTrainingAuthor dialog = new DialogTrainingAuthor(new javax.swing.JFrame(), true, new WordClassifier());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JList<String> ListaArquivosTreinamento;
    private javax.swing.JButton jButtonSelectFile;
    private javax.swing.JButton jButtonTraining;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration                   

}
